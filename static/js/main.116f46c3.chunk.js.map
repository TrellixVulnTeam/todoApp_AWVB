{"version":3,"sources":["components/header/header.jsx","actions/deleteTodoAction.js","components/todo/todo.jsx","components/todoList/todoList.jsx","actions/addTodoAction.js","components/addTodo/addTodo.jsx","App.js","registerServiceWorker.js","reducers/todoListReducer.js","reducers/reducers.js","index.js"],"names":["Header","className","Component","deleteTodoAction","todo","type","plaload","Todo","this","props","item","workName","onClick","deleteTodoById","index","connect","dispatch","bindActionCreators","TodoList","items","map","element","state","todoList","addTodoAction","payload","AddTodo","event","key","addTodo","target","value","placeholder","onKeyDown","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","intialState","rootReducer","combineReducers","action","unshift","splice","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","render","ReactDOM","document","getElementById","subscribe","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.116f46c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './header.css';\n\nclass Header extends Component {\n    render() {\n        return <div className=\"header\">\n            Todo App\n        </div>;\n    }\n}\n\nexport default Header;\n","export function deleteTodoAction(todo) {\n    return {\n        type: 'DELETE_TODO',\n        plaload: todo\n    };\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './todo.css';\nimport { deleteTodoAction } from '../../actions/deleteTodoAction';\nimport { bindActionCreators } from 'redux';\n\nclass Todo extends Component {\n    render() {\n        return (\n            <div className=\"to-do\">\n                <span className=\"to-do-name\">{this.props.item.workName}</span>\n                <span className=\"space\"></span>\n                <button className=\"to-do-delete\" onClick={() => this.props.deleteTodoById(this.props.index)}>Delete</button>\n            </div>\n        );\n    }\n}\n\nconst mapDistachToProps = () => dispatch => {\n    return bindActionCreators({ deleteTodoById: deleteTodoAction }, dispatch);\n};\n\nexport default connect(null, mapDistachToProps)(Todo);\n","import React, { Component } from 'react';\nimport Todo from '../todo/todo';\nimport { connect } from 'react-redux';\n\nclass TodoList extends Component {\n    render() {\n        return (\n            <div className=\"to-do-list\">\n                <span>\n                    {\n                        this.props.items.map((element, index) => {\n                            return <Todo item={element} key={index} index={index} />;\n                        })\n                    }\n                </span>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = () => state => {\n    return {\n        items: state.todoList\n    };\n};\n\nexport default connect(mapStateToProps)(TodoList);\n","export function addTodoAction(todo) {\n    return {\n        type: 'ADD_TODO',\n        payload: todo\n    };\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { addTodoAction } from '../../actions/addTodoAction';\n\nclass AddTodo extends Component {\n    addTodo(event) {\n        if (event.key === 'Enter') {\n            this.props.addTodo({ workName: event.target.value });\n            event.target.value = null;\n        }\n    }\n\n    render() {\n        return (\n            <input type=\"text\" className=\"search\" placeholder=\"Enter todo work \" onKeyDown={event => this.addTodo(event)} />\n        );\n    }\n}\n\nconst mapDistachToProps = () => dispatch => {\n    return bindActionCreators({ addTodo: addTodoAction }, dispatch);\n};\n\nexport default connect(null, mapDistachToProps)(AddTodo);","import React, { Component } from 'react';\nimport Header from './components/header/header';\nimport TodoList from './components/todoList/todoList';\nimport AddTodo from './components/addTodo/addTodo';\n\nimport './App.css';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Header></Header>\n        <div className=\"container\">\n          <div className=\"to-do-container\">\n            <AddTodo className=\"search\" />\n            <div className=\"space-between\"></div>\n            <TodoList />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const intialState = [{\n    workName: 'work 1',\n}, {\n    workName: 'work 2',\n}, {\n    workName: 'work 3',\n}, {\n    workName: 'work 4',\n}];\n\nexport default function (state = intialState, action) {\n    switch (action.type) {\n        case 'ADD_TODO':\n            state.unshift(action.payload);\n            return [...state, action.payload];\n        case 'DELETE_TODO':\n            state.splice(action.payload, 1);\n            return [...state];\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport todoListReducer from './todoListReducer';\n\nconst rootReducer = combineReducers({\n    todoList: todoListReducer\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/reducers';\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nconst render = () => {\n    ReactDOM.render(\n        <Provider store={store}><App /></Provider>, document.getElementById('root'));\n};\n\nstore.subscribe(render);\nrender();\n\nregisterServiceWorker();\n"],"sourceRoot":""}